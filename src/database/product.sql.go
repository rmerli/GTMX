// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  name, 
  abbr,
  price
) VALUES (
  $1,$2,$3
)
RETURNING id, name, abbr, price, category_id
`

type CreateProductParams struct {
	Name  string
	Abbr  string
	Price pgtype.Numeric
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.Name, arg.Abbr, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Abbr,
		&i.Price,
		&i.CategoryID,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, abbr, price, category_id FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Abbr,
		&i.Price,
		&i.CategoryID,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, abbr, price, category_id FROM products
ORDER BY name
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Abbr,
			&i.Price,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
  set name = $2,
  price = $3,
  abbr = $4
WHERE id = $1
RETURNING id, name, abbr, price, category_id
`

type UpdateProductParams struct {
	ID    int64
	Name  string
	Price pgtype.Numeric
	Abbr  string
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Abbr,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Abbr,
		&i.Price,
		&i.CategoryID,
	)
	return i, err
}
