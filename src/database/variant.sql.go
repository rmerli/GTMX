// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: variant.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVariant = `-- name: CreateVariant :one
INSERT INTO variants (
  name, price
) VALUES (
  $1, $2
)
RETURNING id, name, price
`

type CreateVariantParams struct {
	Name  string
	Price pgtype.Numeric
}

func (q *Queries) CreateVariant(ctx context.Context, arg CreateVariantParams) (Variant, error) {
	row := q.db.QueryRow(ctx, createVariant, arg.Name, arg.Price)
	var i Variant
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return i, err
}

const deleteVariant = `-- name: DeleteVariant :exec
DELETE FROM variants
WHERE id = $1
`

func (q *Queries) DeleteVariant(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteVariant, id)
	return err
}

const getVariant = `-- name: GetVariant :one
SELECT id, name, price FROM variants
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVariant(ctx context.Context, id int64) (Variant, error) {
	row := q.db.QueryRow(ctx, getVariant, id)
	var i Variant
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return i, err
}

const listVariants = `-- name: ListVariants :many
SELECT id, name, price FROM variants
ORDER BY name
`

func (q *Queries) ListVariants(ctx context.Context) ([]Variant, error) {
	rows, err := q.db.Query(ctx, listVariants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Variant
	for rows.Next() {
		var i Variant
		if err := rows.Scan(&i.ID, &i.Name, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVariant = `-- name: UpdateVariant :one
UPDATE variants
  set name = $2, price = $3
  WHERE id = $1
RETURNING id, name, price
`

type UpdateVariantParams struct {
	ID    int64
	Name  string
	Price pgtype.Numeric
}

func (q *Queries) UpdateVariant(ctx context.Context, arg UpdateVariantParams) (Variant, error) {
	row := q.db.QueryRow(ctx, updateVariant, arg.ID, arg.Name, arg.Price)
	var i Variant
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return i, err
}
